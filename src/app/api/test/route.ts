import { getAllAlbumsBySingerName, getAllSongsByArtistId, searchSingerName } from "@/lib/utils/MusicUtils";
import { parseParams } from "@/lib/utils/neteaseParse";
import { Song } from "@/types/album";
import { NextResponse } from "next/server";
type dataType = {
  code:number,
  data:{
    resources:Song[]
    totalCount:number
  }
}
export async function GET(request: Request) {
  // const content = "0882808400EF763BE28A072B023DC2246089DCFBD9AB125822F2A2A22EA5EC7FE992C218B48F6DA1F29B133C59D97D3BC9EE484DFAB8A3F6314A38DEC18BB7ACE4FE8EA1AB75BD5F5F2FAD5CF664CA6E230D48D25F79EB12D0A4E3D11B9C324F3A29D17CF9BC72FDA9ACA72886E9AE385A978F13F06DA50C8DCA8395AD693F0A7DDACF57A1971155BCDC68174E3324207CBC1304FBD055B07D40555994774DCD294F251C22D11C2A9EFCC0C56C899FB889BDD081E7BB4326C14C2EDEA11CC83765B5953244EEB2B1897FABEF99D3A408D9499C28C13285B3E4BFA5F9D05D92F60FF58F98BCEBC642818D6AF7C407A86E9E84C8B4C24E758AEA8A40967F7FDCFE64D5F704046854F3E9C87E51EF3D32700829CFF96F4667BD448E067A30FB6E7675412726FF7A4561112B94FAEFEEEFEE75963336432203DCFA07587160DD82583336AE3883B5A44B963A9BAE4F6B8506EB134D930B223F6BA8DCF78A157A438D022BA061FADCE25AF485AA87A1C6B67A868A42078D825F25AD2D3CE7E70CEE2DD2EF355671C38EF5B9A68E44A0298BCB9179DBDB2F93729FDE8DAE843E4FE24418412DFF09F3F4D18682C5F48337B7392269CF90BB8A5111008A31C1519ACE43C1149DF19C8AE9BA5590D43BE6D2FFCA303734F95D8DC8E70D3B0B36B553D615DE038719DC6720C0C1A63B8BABB1C99BDF51D9E1F23D565B0AB2CFDB7D4CFDB1FA4F456D7444F48E42C4A25066F226CBC375AE40D470F3CA099EA570E2695D31990A8ED1D2764E7A2E643B52D22A0BFBB7A2346B247231DC353CFB4AA825A50ABD469C06943D66D6E0890F29BF72D11E7D85CE4B41078BF60010315AB99557AAF2D21C063B5CBFCE0DCAEE7F2F6FA84164BCA9AFEDDE6F0A3303FDC5634ADE8E3A53F2EB84D5EB32654A4BA3876DEE5CB4792E24C21B8986275479AC600505B62222769CAE8787C22309C6BB65D1179EA29418ECE769CC8413C31BAEAA59FB8E5ACF65024F4BD1894F1CF456FEDF6A754686AC13603BA914D9536C1BC01B07B95A6D58ABAC2B3EA9885604E4564BBEB6A7B19844C6B47E8D74DF69D6E34CB296F2D63C175E79C192A4031F4A1D162176EF4640D246EE47DDA87BD82FF8E325FF5829A26BB7B0EB36951829099AD58069C7823C7887CDEC5E92A2288CE6DFA2BE803EB505C29C59F41DFD2DE4DD794574F3804B3AF7C21A12AEDEF5F5F23A72DCCCDBC42653226F22F9553D4280BEF570D2EE7EE7CCD027B93549090A33ED9D44C0314D4D8FAD17EA844BF9F2D4935186CD1B2B7131C526EDC2E1F2ECAD15C958"
  // console.log(parseParams(content))

  // 循环取歌曲方法  但是速度太慢 暂时不考虑采纳
  // let offset = 0
  // let totalCount = 0
  // const limit = 20
  // let data : Song[] = []
  // let res: dataType
  // do{
  //   res = await searchSingerName("许嵩",process.env.COOKIE || "",{limit,offset}) as dataType
  //   data = [...data,...res.data.resources]
  //   totalCount = res.data.totalCount
  //   offset = offset + limit
  // }while(offset < totalCount)
  // const res = await getAllSongsByArtistId("5771",process.env.COOKIE)

  const res = await getAllAlbumsBySingerName("许嵩",process.env.COOKIE)


// /api/v1/search/album/get
  return NextResponse.json(res)
}
